
ServoClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000480  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000480  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d85  00000000  00000000  000104f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000350  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  000115c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000071  00000000  00000000  00011678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000054e  00000000  00000000  000116e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010ef  00000000  00000000  00011c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005375e  00000000  00000000  00012d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000164  00000000  00000000  00066484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000665e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000460 	.word	0x08000460

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000460 	.word	0x08000460

080001d8 <main>:
void tim3_callback();

/* Global variables */
volatile int seconds = 0;

int main(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	/* Initialization functions */
	pwm_tim2_init();
 80001dc:	f000 f82e 	bl	800023c <pwm_tim2_init>
	tim3_1hz_init();
 80001e0:	f000 f8c8 	bl	8000374 <tim3_1hz_init>

	while(1){
 80001e4:	e7fe      	b.n	80001e4 <main+0xc>
	...

080001e8 <tim3_callback>:
		
	}
}

void tim3_callback(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	seconds++;
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <tim3_callback+0x28>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <tim3_callback+0x28>)
 80001f4:	6013      	str	r3, [r2, #0]
	if (seconds >= 60){
 80001f6:	4b06      	ldr	r3, [pc, #24]	; (8000210 <tim3_callback+0x28>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b3b      	cmp	r3, #59	; 0x3b
 80001fc:	dd02      	ble.n	8000204 <tim3_callback+0x1c>
		seconds = 0;
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <tim3_callback+0x28>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
		//define clock call
	}
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	2000001c 	.word	0x2000001c

08000214 <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	//interrupt pending
	if (TIM3->SR & SR_UIF){
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <TIM3_IRQHandler+0x24>)
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	f003 0301 	and.w	r3, r3, #1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d007      	beq.n	8000234 <TIM3_IRQHandler+0x20>
		// reset interrupt flag
		TIM3->SR &= ~(SR_UIF);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <TIM3_IRQHandler+0x24>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <TIM3_IRQHandler+0x24>)
 800022a:	f023 0301 	bic.w	r3, r3, #1
 800022e:	6113      	str	r3, [r2, #16]
		tim3_callback();
 8000230:	f7ff ffda 	bl	80001e8 <tim3_callback>
	}
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40000400 	.word	0x40000400

0800023c <pwm_tim2_init>:
#define MAX_SERVO_VALUE			100
#define MIN_SERVO_VALUE			50
#define MAX_DEGREE_RANGE		180
#define MIN_DEGREE_RANGE		0

void pwm_tim2_init(void){
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0


	//configure gpioa pins 1, 2, 3
	RCC->AHB1ENR |= GPIOAEN;
 8000240:	4b3b      	ldr	r3, [pc, #236]	; (8000330 <pwm_tim2_init+0xf4>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a3a      	ldr	r2, [pc, #232]	; (8000330 <pwm_tim2_init+0xf4>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= TIM2EN;
 800024c:	4b38      	ldr	r3, [pc, #224]	; (8000330 <pwm_tim2_init+0xf4>)
 800024e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000250:	4a37      	ldr	r2, [pc, #220]	; (8000330 <pwm_tim2_init+0xf4>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6413      	str	r3, [r2, #64]	; 0x40

	/* CONFIG PORT A PINS 1-3*/
	GPIOA->MODER &= ~(0x000000FC);
 8000258:	4b36      	ldr	r3, [pc, #216]	; (8000334 <pwm_tim2_init+0xf8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a35      	ldr	r2, [pc, #212]	; (8000334 <pwm_tim2_init+0xf8>)
 800025e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (MODER_PIN_1_AF | MODER_PIN_2_AF | MODER_PIN_3_AF);
 8000264:	4b33      	ldr	r3, [pc, #204]	; (8000334 <pwm_tim2_init+0xf8>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a32      	ldr	r2, [pc, #200]	; (8000334 <pwm_tim2_init+0xf8>)
 800026a:	f043 03a8 	orr.w	r3, r3, #168	; 0xa8
 800026e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0x0000FFF0);
 8000270:	4b30      	ldr	r3, [pc, #192]	; (8000334 <pwm_tim2_init+0xf8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a2f      	ldr	r2, [pc, #188]	; (8000334 <pwm_tim2_init+0xf8>)
 8000276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800027a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (AFR_PIN_3 | AFR_PIN_2 | AFR_PIN_1);
 8000280:	4b2c      	ldr	r3, [pc, #176]	; (8000334 <pwm_tim2_init+0xf8>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a2b      	ldr	r2, [pc, #172]	; (8000334 <pwm_tim2_init+0xf8>)
 8000286:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6213      	str	r3, [r2, #32]
	GPIOA->OSPEEDR &= ~(PIN1_HIGHSPEED | PIN2_HIGHSPEED | PIN3_HIGHSPEED);
 8000290:	4b28      	ldr	r3, [pc, #160]	; (8000334 <pwm_tim2_init+0xf8>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a27      	ldr	r2, [pc, #156]	; (8000334 <pwm_tim2_init+0xf8>)
 8000296:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 800029a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (PIN3_HIGHSPEED | PIN2_HIGHSPEED | PIN3_HIGHSPEED);
 800029c:	4b25      	ldr	r3, [pc, #148]	; (8000334 <pwm_tim2_init+0xf8>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a24      	ldr	r2, [pc, #144]	; (8000334 <pwm_tim2_init+0xf8>)
 80002a2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80002a6:	6093      	str	r3, [r2, #8]


	// systemclock at 16MHz
	/* Set for 20 ms */
	TIM2->PSC = PSC_VALUE;
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	f240 123f 	movw	r2, #319	; 0x13f
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = ARR_VALUE;
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002ba:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0; // restart counter
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c0:	2200      	movs	r2, #0
 80002c2:	625a      	str	r2, [r3, #36]	; 0x24


	//enable pwm mode for ch 2, 3, & 4
	TIM2->CCMR1 |= CH2_PWM_MODE_ONE;
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80002d2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR2 |= (CH3_PWM_MODE_ONE | CH4_PWM_MODE_ONE);
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002de:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80002e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002e6:	61d3      	str	r3, [r2, #28]

	// init duty cycle
	TIM2->CCR2 = 100;
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ec:	2264      	movs	r2, #100	; 0x64
 80002ee:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 100;
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f4:	2264      	movs	r2, #100	; 0x64
 80002f6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 100;
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	2264      	movs	r2, #100	; 0x64
 80002fe:	641a      	str	r2, [r3, #64]	; 0x40

	TIM2->CCER |= (CCER_CC4E | CCER_CC3E | CCER_CC2E); //enable capture/compare of tim2ch2
 8000300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000304:	6a1b      	ldr	r3, [r3, #32]
 8000306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= CR1_CEN;
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020000 	.word	0x40020000

08000338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	2b00      	cmp	r3, #0
 8000348:	db0b      	blt.n	8000362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f003 021f 	and.w	r2, r3, #31
 8000350:	4907      	ldr	r1, [pc, #28]	; (8000370 <__NVIC_EnableIRQ+0x38>)
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	095b      	lsrs	r3, r3, #5
 8000358:	2001      	movs	r0, #1
 800035a:	fa00 f202 	lsl.w	r2, r0, r2
 800035e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000e100 	.word	0xe000e100

08000374 <tim3_1hz_init>:
/*TIM3 DEFINITIONS*/
#define TIM3EN				(1U<<1)
#define DIER_UIE			(1U<<0)
#define CR1_CEN				(1U<<0)

void tim3_1hz_init(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	/* Configure TIM3 interrupt at 1hz */

	/* Enable clock for timer 3 & DMA1*/
	RCC->APB1ENR |= TIM3EN;
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <tim3_1hz_init+0x48>)
 800037a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037c:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <tim3_1hz_init+0x48>)
 800037e:	f043 0302 	orr.w	r3, r3, #2
 8000382:	6413      	str	r3, [r2, #64]	; 0x40

	/*Timer configured to 1Hz*/
	TIM3->PSC = 1600 - 1;
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <tim3_1hz_init+0x4c>)
 8000386:	f240 623f 	movw	r2, #1599	; 0x63f
 800038a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 10000 - 1;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <tim3_1hz_init+0x4c>)
 800038e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000392:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CNT = 0; //reset counter
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <tim3_1hz_init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	625a      	str	r2, [r3, #36]	; 0x24

	/* Enable interrupt */
	TIM3->DIER |= DIER_UIE;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <tim3_1hz_init+0x4c>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <tim3_1hz_init+0x4c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	60d3      	str	r3, [r2, #12]

	/* Enable in NVIC */
	NVIC_EnableIRQ(TIM3_IRQn);
 80003a6:	201d      	movs	r0, #29
 80003a8:	f7ff ffc6 	bl	8000338 <__NVIC_EnableIRQ>

	/* Start Clock */
	TIM3->CR1 |= CR1_CEN;
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <tim3_1hz_init+0x4c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a03      	ldr	r2, [pc, #12]	; (80003c0 <tim3_1hz_init+0x4c>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6013      	str	r3, [r2, #0]
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40000400 	.word	0x40000400

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff feef 	bl	80001d8 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	20000020 	.word	0x20000020

08000414 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	; (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	; (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	; (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	; (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
